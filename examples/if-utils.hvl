(make-prologue)

;----------------------------------------------------------------
(defun flatten0 (lst)
  (let (rv)
    (dolist (each-if lst)
      (dolist (aif each-if)
        (push aif rv)))
    rv))

;----------------------------------------------------------------
(defmacro make-serial-no-if (if-name name range-n &rest body)
  (let ((i (gensym)))
    `(l_if (l_> ,range-n 0) (flatten0 (foreach ,i (range (l_- ,range-n 1) -1 -1) (,if-name 
    (symcat ,name ,i '_) ,@body))))))

;----------------------------------------------------------------
;(reg a)
;(reg (8 aa))
;(reg (8 (4 ax)))

(defun get-declare-name (v-name-lst)
    (l_if (atom v-name-lst) (values v-name-lst nil nil)
        (let ((data-width (car v-name-lst))
              (v-name-lst (cadr v-name-lst)))
            (l_if (atom v-name-lst) (values v-name-lst data-width nil)
                (values (cadr v-name-lst) data-width (car v-name-lst))))))

(defun without-with-postfix (sym remove-postfix-lst add-postfix)
  "sym から remove-postfix-lst をとりのぞき add-postfix する or
   sym から remove-postfix-lst をとりのぞき 対応する add-postfix をつける
   sym から remove-postfix-lst をとりのぞけなく、かつ add-postfix が
   リストなら何もつけない
   add-postfix が nil のばあい何もつけない "

  (let* ((name (string-downcase (symbol-name sym)))
         (name-len (length name))
         (name-2 (subseq name 0 (l_- name-len 2)))
         (last2 (subseq name (l_- name-len 2)))
         (name-postfix (l_if (l_> name-len 2) last2))
         (hit-postfix-position (position name-postfix (mapcar #'symbol-name remove-postfix-lst) :test #'string=))
         (sym (symcat (l_if hit-postfix-position name-2 name) 
            (l_if (listp add-postfix) 
                (l_if hit-postfix-position
                    (nth hit-postfix-position add-postfix)) add-postfix))))
    sym))

;----------------------------------------------------------------
(defun make-flipped-if (lst &optional over-write)
  (mapcar #'(lambda (x) 
    (let* ((if-name (car x))
           (vname-or-lst (cadr x))
           (vname-car-lst (l_if (atom vname-or-lst) (cdr x) (cdadr x)))
           (vname (car vname-car-lst))
           (new-vname (without-with-postfix vname '(_i _o) '(_o _i)))
           (alternative-if-name (cadr (member if-name '(input output input)))))
      (assert alternative-if-name nil "inteface must be input or output. ~a" x)
      #|
      (print `(:ain ,alternative-if-name ,x ,(car x) ,
        (let ((new-x (copy-tree x)))
            (setf (car new-x) alternative-if-name)
            new-x)) *error-output*)
      |#
      (setf (car x) alternative-if-name)
      (setf (car vname-car-lst) new-vname)
      x))
      (l_if over-write lst (copy-tree lst))))

;----------------------------------------------------------------
(defun make-wire-list-from-if (if-list &key (filter #'(lambda (x) x)) (remove-postfix-lst '(_i _o)) (add-postfix '_w) (only-name nil))
  (remove-if #'null
    (mapcar #'(lambda (x) 
                (multiple-value-bind (vname dwidth) (get-declare-name (cadr x))
                  (let ((new-vname (l_if (funcall filter x)
                                         (without-with-postfix vname remove-postfix-lst add-postfix))))
                    (l_if new-vname
                          (l_if (l_or only-name (null dwidth)) new-vname `(,dwidth ,new-vname)))))) if-list)))

;----------------------------------------------------------------
(defun make-assign-list-from-if (if-list &key (filter #'(lambda (x) (eq (car x) 'output))) (remove-postfix-lst '(_o)) (add-postfix '_r) add-src-postfix)
  (remove-if #'null
    (mapcar #'(lambda (x) 
                (multiple-value-bind (vname dwidth) (get-declare-name (cadr x))
                  (let ((src-vname (l_if add-src-postfix
                                     (without-with-postfix vname remove-postfix-lst add-src-postfix) vname))
                        (new-vname (l_if (funcall filter x)
                                         (without-with-postfix vname remove-postfix-lst add-postfix))))
                    (l_if new-vname `(assign ,src-vname ,new-vname))))) if-list)))

;----------------------------------------------------------------
(defun make-if-list-from-module (module-macro &key (ignore-sym-lst '(rst clk)))
  (let* ((flag (listp module-macro))
         (module-args (l_if flag (cddr module-macro)))
         (anon (l_if flag (cadr module-macro) 'anon))
         (new-module-macro (l_if flag (car module-macro) module-macro))
         (args (caddr (macroexpand-1 `(,new-module-macro ,anon ,@module-args )))))
     (remove-if #'null
        (mapcar #'(lambda (x)
           (let* ((vname-or-lst (cadr x))
                  (vname (l_if (atom vname-or-lst) vname-or-lst (cadr vname-or-lst)))
                  (hit_flag (l_not (find vname ignore-sym-lst))))
             (l_if hit_flag x))) args))))

;----------------------------------------------------------------
(defun show-module-if (module-macro &optional (out *error-output*))
    (print `(:view-module ,(make-if-list-from-module module-macro)) out))

;----------------------------------------------------------------
(defun show-module-reg (module-macro &optional reg-name (out *error-output*))
  (let ((body (cdddr (macroexpand-1 `(,module-macro anon)))))
    (dolist (expr body)
      ;(print `(:hello ,expr) out)
      (when (eq (car expr) 'v_reg)
        (dolist (v (cdr expr))
          (l_if (eq (get-declare-name v) reg-name)
            (print `(:expr ,v) out)))))))

;----------------------------------------------------------------
(defun make-wire-list-from-module (module-macro &key (ignore-sym-lst '(rst clk)) (filter #'(lambda (x) x)) (remove-postfix-lst '(_i _o)) (add-postfix '_w) (only-name nil))
  (make-wire-list-from-if (make-if-list-from-module module-macro :ignore-sym-lst ignore-sym-lst) :filter filter :remove-postfix-lst remove-postfix-lst :add-postfix add-postfix :only-name only-name))

;----------------------------------------------------------------
(defun make-reg-wire-assign (module-macro &key (ignore-sym-lst '(clk rst)))
    (let ((my-wires `(wire ,@(make-wire-list-from-module module-macro :filter #'(lambda (x) (eq (car x) 'input)) :ignore-sym-lst ignore-sym-lst)))
          (my-regs `(reg ,@(make-wire-list-from-module module-macro :filter #'(lambda (x) (eq (car x) 'input)) :add-postfix '_r :ignore-sym-lst ignore-sym-lst))))
          `(,my-wires ,my-regs 
              ,@(mapcar #'(lambda (x) `(assign ,(symcat x 'w) ,(symcat x 'r)))
                  (make-wire-list-from-module module-macro :filter 
                                          #'(lambda (x) (eq (car x) 'input))
                                          :only-name t
                                          :add-postfix '_
                                          :ignore-sym-lst ignore-sym-lst)))))

;----------------------------------------------------------------
(defparameter *DEFINE-WORD* "TEST_BENCH")
(defmacro tb-main (expr &rest body)
  `(when ,expr
      (format t "`ifdef ~a~%" *DEFINE-WORD*)
      ,@body 
      (format t "`endif~%")))

;----------------------------------------------------------------
(when (eq *__name__* :__main__)

  (use clocks)
  (make-clock clock)

  (defmacro make-test1-module (module-name)
    `(module ,module-name
       ((input clk)
        (input rst)

        (input test_a_i)
        (output test_b_o))))

  (defmacro make-test2-module (module-name)
    `(module ,module-name
       ((input clk)
        (input rst)

        ,@(make-flipped-if (make-if-list-from-module 'make-test1-module)))))

  (make-test1-module test1)
  (make-test2-module test2)

  (let ((if-lst (make-wire-list-from-module 'make-test2-module) ))
    (eval
      `(module tb ()
         (wire clk)
         (reg= rst 0)
         (wire ,@if-lst)
  
         (test1 :name test0 clk rst ,@if-lst)
         (test2 :name test1 clk rst ,@if-lst)

         (clock :name clock0 clk)
  
         (initial
           (# 200 :pass)
           (= rst 0)
           (# 200) (= rst 1)
           (# 200) (= rst 0)
  
           (finish))))))

(make-epilogue)
