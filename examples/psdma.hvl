(make-prologue)
(defparameter *DQ_WIDTH* 16)
(defparameter *ADDR_WIDTH* 21)
(defparameter *DATA_WIDTH* (l_* 4 *DQ_WIDTH*))
(defparameter *MAX_READ_WIDTH* 13) ; 8192

(use axis)

;----------------------------------------------------------------

(defun make-read-if (name data-width addr-width &optional use-for-video)
    (copy-tree
        `((input (,addr-width ,(symcat name 'addr)))
          (input (,*MAX_READ_WIDTH* ,(symcat name 'bytes)))
          (input ,(symcat name 'req))
          (output ,(symcat name 'req_ack))
          (output ,(symcat name 'finished))
          (input ,(symcat name 'finished_ack))

          ,(l_if use-for-video `(input ,(symcat name 'is_first_line)))

          ,@(make-axis-main-if name data-width))))

(defun make-write-if (name data-width addr-width)
    (copy-tree
        `((input (,addr-width ,(symcat name 'addr)))
          (input (,*MAX_READ_WIDTH* ,(symcat name 'bytes)))
          (input ,(symcat name 'req))
          (output ,(symcat name 'req_ack))
          (output ,(symcat name 'finished))
          (input ,(symcat name 'finished_ack))

          ,@(make-axis-sub-if name data-width))))

(defmacro make-psdma-module (module-name &optional (beat-n 32) (data-width *DATA_WIDTH*) (addr-width *ADDR_WIDTH*))
  (let ((data-mask-width (l_/ data-width 8))
        (one-read-bytes (l_* (l_/ data-width 8) beat-n))
        (beat-n-bit-width (l_+ (floor (l_log beat-n) (l_log 2.0)) 1)))
    `(module ,module-name 
        ((input clk)
         (input rst)

         ;interface for PSRAM
         (input init_calib_i)
         (input (,data-width rd_data_i))
         (input rd_data_valid_i)

         (output (,data-width wr_data_o))
         (output (,data-mask-width data_mask_o)) ; for write

         (output (,addr-width addr_o))
         (output cmd_o)
         (output cmd_en_o)

        ,@(make-read-if 'read_ data-width addr-width :use-for-video)
        ,@(make-write-if 'write_ data-width addr-width)

        (output (5 debug_error_o))
        (output (2 error_o)))

        ,@(make-axis-main-reg 'read_ data-width)
        (reg= write_tready_r 0)
        (assign write_tready write_tready_r)

        (reg= read_req_ack_r 0)
        (assign read_req_ack read_req_ack_r)
        (reg= read_finished_r 0)
        (assign read_finished read_finished_r)

        (reg= write_req_ack_r 0)
        (assign write_req_ack write_req_ack_r)
        (reg= write_finished_r 0)
        (assign write_finished write_finished_r)

        (reg psram_cmd_r)
        (reg= psram_cmd_en_r 0)

        (reg (,addr-width psram_addr_r))
        (reg (,*MAX_READ_WIDTH* psram_bytes_r))
        (reg psram_is_first_line)

        (reg data_mask_r)

        (assign cmd_o psram_cmd_r)
        (assign cmd_en_o psram_cmd_en_r)
        (assign addr_o psram_addr_r)
        (assign data_mask_o data_mask_r)
        (assign wr_data_o write_tdata)

        (reg= (5 psman_status) 0)
        (reg (,beat-n-bit-width read_counter))

        (reg (,data-width rd_data_r))

        (reg= (5 debug_error_n) (d 5 0))
        (reg= rd_error_r 0)
        (reg= wr_error_r 0)
        (assign debug_error_o debug_error_n)
        (assign error_o (cat wr_error_r rd_error_r))

        (always ((posedge clk))
            (case psman_status
                (#b00000
                  (if init_calib_i
                    (cond
                      (read_req
                        (<=# read_req_ack_r 1)
                        (<=# psram_addr_r read_addr)
                        (<=# psram_bytes_r read_bytes)
                        (<=# psram_is_first_line read_is_first_line)
                        (<=# psram_cmd_r 0)
                        (<=# psman_status #b00001))
                      (write_req
                        (<=# write_req_ack_r 1)
                        (<=# psram_addr_r write_addr)
                        (<=# psram_bytes_r write_bytes)
                        (<=# psram_is_first_line 0)
                        (<=# psram_cmd_r 1)
                        (<=# psman_status #b10000)))))

                ;--------------------------------
                ; Start Read REQ
                (#b00001
                    (if (| (== read_req 0) (== read_req_ack_r 0))
                       (progn
                         ; assert (== read_tready 1)
                         (<=# read_req_ack_r 0)
                         (<=# psram_cmd_en_r 1)
                         (<=# psman_status #b00011))))

                ; Wait Read Data
                (#b00011
                    (<=# psram_cmd_en_r 0)
                    (if (== rd_data_valid_i #b1)
                      (progn
                       (<=# read_tvalid_r 1)
                       (<=# read_tdata_r rd_data_i)
                       (<=# psram_is_first_line #b0)
                       (<=# psman_status #b00010)
                       (<=# read_counter ,(l_- beat-n 1))))

                    ; assert (== read_tready 1)
                    (<=# read_tuser_r psram_is_first_line)
                    (<=# read_tlast_r 0))

                ; Read Data as Burst
                (#b00010
                    (<=# read_tdata_r rd_data_i)
                    (<=# read_tvalid_r 1)
                    (<=# read_tuser_r 0)

                    (if (| (== rd_data_valid_i #b0) (== read_tready 0))
                        (progn
                         (<=# rd_error_r 1)
                         (<=# debug_error_n (+ debug_error_n 1))))

                    (if (== read_counter 0)
                        (progn
                         (<=# psman_status #b00110)
                         (<=# read_tlast_r (<= psram_bytes_r ,one-read-bytes)))
                        (<=# read_counter (- read_counter 1))))

                ; Read Done 
                (#b00110
                  (<=# read_tdata_r (cat* ,data-width (cat (b 1 x))))
                  (<=# read_tvalid_r 0)
                  (<=# read_tlast_r 0)
                  (if (> psram_bytes_r ,one-read-bytes)
                    (progn
                     (<=# psram_bytes_r (- psram_bytes_r ,one-read-bytes))
                     (<=# psram_addr_r (+ psram_addr_r ,one-read-bytes))
                     (<=# psman_status #b00001))
                    (progn
                     (<=# read_finished_r 1)
                     (<=# psman_status #b00100))))

                ; Wait read finished ACK
                (#b00100
                    (if (== read_finished_ack 1)
                        (progn
                         (<=# read_finished_r 0)
                         (<=# psman_status #b00000))))

                ;--------------------------------
                ; Start Write REQ
                (#b10000
                    (if (| (== write_req 0) (== write_req_ack_r 0))
                       (progn
                         (<=# write_req_ack_r 0)
                         (<=# psram_cmd_en_r 1)
                         (<=# data_mask_r (cat* ,data-mask-width (cat (b 1 0))))
                             ; 1 means avoiding to write
                         (<=# write_tready_r 1)

                         (<=# psman_status #b10001)))
                    (<=# read_counter ,(l_- beat-n 1)))

                ; Write Data as Burst
                (#b10001
                    (<=# psram_cmd_en_r 0)

                    (if (== write_tready 0)
                        (progn
                         (<=# wr_error_r 1)
                         (<=# debug_error_n (+ debug_error_n 1))))

                    (if (== read_counter 0)
                      (progn
                        (<=# write_tready_r 0)
                        (<=# psman_status #b10011))
                      (<=# read_counter (- read_counter 1))))

                ; Read Done 
                (#b10011
                  (<=# write_finished_r 1)
                  (<=# psman_status #b10010))

                ; Wait write finished ACK
                (#b10010
                  (if (== write_finished_ack 1)
                    (progn
                      (<=# write_finished_r 0)
                      (<=# psman_status #b00000))))

                ;--------------------------------
                (default
                    ; nothing to do
                    (<=# psman_status psman_status))))

        )))

(defun without-with-postfix (sym remove-postfix-lst add-postfix)
  (let* ((name (string-downcase (symbol-name sym)))
         (name-len (length name))
         (name-2 (subseq name 0 (l_- name-len 2)))
         (last2 (subseq name (l_- name-len 2)))
         (name-postfix (l_if (l_> name-len 2) last2))
         (hit-postfix (find name-postfix (mapcar #'symbol-name remove-postfix-lst) :test #'string=))
         (sym (symcat (l_if hit-postfix name-2 name) add-postfix)))
    sym))
    

(defun make-wire-list-from-module (module-macro &key (ignore-sym-lst '(rst clk))(filter #'(lambda (x) x)) (remove-postfix-lst '(_i _o)) (add-postfix '_w) (only-name nil))
    (let ((args (caddr (macroexpand-1 `(,module-macro anon)))))
      (remove-if #'null
        (mapcar #'(lambda (x) 
            (let* ((vname-or-lst (cadr x))
                   (vname (l_if (atom vname-or-lst) vname-or-lst (cadr vname-or-lst)))
                   (ignore_flag (l_or (find vname ignore-sym-lst) (l_not (funcall filter x))))
                   (new-vname (l_if ignore_flag vname (without-with-postfix vname remove-postfix-lst add-postfix)))
                   (dwidth (l_if (l_not (atom vname-or-lst)) (car vname-or-lst))))
                (l_if ignore_flag nil
                      (l_if (l_or only-name (null dwidth)) new-vname `(,dwidth ,new-vname)))
                ;(print `(:v ,new-vname) *error-output*)
                )) args))))

(defun make-reg-wire-assign (module-macro &key (ignore-sym-lst '(clk rst)))
    (let ((my-wires `(wire ,@(make-wire-list-from-module module-macro :filter #'(lambda (x) (eq (car x) 'input)) :ignore-sym-lst ignore-sym-lst)))
          (my-regs `(reg ,@(make-wire-list-from-module module-macro :filter #'(lambda (x) (eq (car x) 'input)) :add-postfix '_r :ignore-sym-lst ignore-sym-lst))))
          `(,my-wires ,my-regs 
              ,@(mapcar #'(lambda (x) `(assign ,(symcat x 'w) ,(symcat x 'r)))
                  (make-wire-list-from-module module-macro :filter 
                                          #'(lambda (x) (eq (car x) 'input))
                                          :only-name t
                                          :add-postfix '_
                                          :ignore-sym-lst ignore-sym-lst)))))

(when (eq *__name__* :__main__)
  (use clocks)
  (setf *transport-delay* 1)

  (make-psdma-module psdma)
  (make-clock clock)

  ;(setf mrv (caddr (macroexpand-1 '(make-psdma-module psdma))))
  ;(setf mm (make-wire-list-from-module 'make-psdma-module))
  ;(print mm *error-output*)
  ;(print (without-with-postfix 'abc_i_w '(_i _o) '_w) *error-output*)
 
  (eval
  `(module tb ()
    (wire clk)
    (reg= rst 0)

    (clock :name clock0 clk)
    
    #|
    ,@(make-axis-wire 'read_ *DATA_WIDTH*)
    ,@(make-axis-wire 'write_ *DATA_WIDTH*)
    (wire (5 debug_error_w) error_w)
    |#
    (wire ,@(make-wire-list-from-module 'make-psdma-module :filter 
        #'(lambda (x) (eq (car x) 'output))))

#|
    (wire ,@(make-wire-list-from-module 'make-psdma-module :filter 
        #'(lambda (x) (eq (car x) 'input))))

    (reg ,@(make-wire-list-from-module 'make-psdma-module :filter 
        #'(lambda (x) (eq (car x) 'input))
        :add-postfix '_r))

    ,@(mapcar #'(lambda (x) `(assign ,(symcat x 'w) ,(symcat x 'r)))
              (make-wire-list-from-module 'make-psdma-module :filter 
                                          #'(lambda (x) (eq (car x) 'input))
                                          :only-name t
                                          :add-postfix '_))
|#
    ,@(make-reg-wire-assign 'make-psdma-module :ignore-sym-lst '(rst clk rd_data_i rd_data_valid_i))
    
    (psdma :name psdma0 clk rst
           ,@(make-wire-list-from-module 'make-psdma-module :only-name t)
        #|
        ,@(mapcar #'(lambda(x) (symcat 'anon0_ x)) (range 9))

        ,@(mapcar #'(lambda(x) (symcat 'anon1_ x)) (range 8))
        ,@(make-axis-name-list 'read_ *DATA_WIDTH*)

        ,@(mapcar #'(lambda(x) (symcat 'anon2_ x)) (range 6))
        ,@(make-axis-name-list 'write_ *DATA_WIDTH*)
        debug_error_w error_w
        |#

        )

    (wire (,*DATA_WIDTH* rd_data_w) rd_data_valid_w)
    (reg (,*DATA_WIDTH* rd_data_r) rd_data_valid_r)
    (assign rd_data_w rd_data_r)
    (assign rd_data_valid_w rd_data_valid_r)

#|
          (input ,(symcat name 'req))
          (output ,(symcat name 'req_ack))
          (output ,(symcat name 'finished))
          (input ,(symcat name 'finished_ack))
|#

    (initial
        (dumpfile "vcd/psdma.vcd")
        (dumpvars 0 tb)

        (= init_calib_r 1)
        (= read_addr_r (h ,*ADDR_WIDTH* 00_0000))
        (= read_bytes_r ,(l_* 640 4))
        (= read_req_r 0)
        (= read_finished_ack_r 0)

        (# 200 :pass)
        (= rst 0)
        (# 200) (= rst 1)
        (# 200) (= rst 0)

        (# 200)
        (= read_req_r 1)
        (wait (== read_req_ack_w 1))
        (# 10)
        (= read_req_r 0)
        (# 10)
        (display "here")
        (wait (== read_req_ack_w 0))
        (display "here2")

        (display "read_finished_ack_r:" read_finished_ack_r)

        (# 10)
        (wait (== read_finished_w 1))
        (display "here3")

        (# 100)
        (= read_finished_ack_r 1)
        (display "read_finished_ack_r:" read_finished_ack_r)

        (# 10)
        (wait (== read_finished_w 0))
        (display "here4")


        (# 200)
        (finish)))))

(make-epilogue)
