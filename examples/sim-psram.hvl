(make-prologue)
(defparameter *DATA_WIDTH* 64)
(defparameter *ADDR_WIDTH* 21)

(use if-utils)

(defun make-psram-access-if (&optional (data-width *DATA_WIDTH*) (addr-width *ADDR_WIDTH*))
  (let ((data-mask-width (l_/ data-width 8)))
    (copy-tree
        `((input init_calib_i)
          (input (,data-width rd_data_i))
          (input rd_data_valid_i)

          (output (,data-width wr_data_o))
          (output (,data-mask-width data_mask_o))

          (output (,addr-width addr_o))
          (output cmd_o)
          (output cmd_en_o)))))

(defmacro make-sim-psram-module (module-name &key (data-width *DATA_WIDTH*) (addr-width *ADDR_WIDTH*) (read-latency 16) (beat-n 32) (read-post-wait-n 16))
   (let ((psram-if (make-reverse-if (make-psram-access-if data-width addr-width))))
    (assert (l_>= read-latency 3) nil "read-latency must be >= 3, but now '~a'" read-latency)
    `(module ,module-name 
       ((input clk)
        (input rst)
        ,@psram-if)

       (reg ,@(make-wire-list-from-if psram-if
        :filter #'(lambda (x) 
            (l_and (eq (car x) 'output)
                (let ((vname (get-declare-name (cadr x))))
                    (l_not (member vname '(init_calib_o rd_data_valid_o))))))
        :add-postfix '_r
       ))

       (reg= init_calib_r 0)
       (reg= rd_data_valid_r 0)

       ,@(make-assign-list-from-if psram-if)

       ;----------------------------------------------------------------
       (reg (,addr-width addr_r))

       ;----------------------------------------------------------------
       (reg (5 read_counter))

       (reg= (3 status) 0)
       (always ((posedge clk))
         (case status
           (0
             (<=# init_calib_r 1)
             (<=# status 1)
             (<=# read_counter 0)
             (<=# rd_data_valid_r 0))

           (1
             (<=# addr_r addr_i);

             (if cmd_en_i
                (if (== cmd_i 0)
                  (<=# status 2)
                  (<=# status #b10000))))

           ; read wait because of busy
           (2
             (if (== read_counter 0)
               (progn
                (<=# read_counter ,(l_- read-latency 3))
                (<=# status 3))
               (<=# read_counter (- read_counter 1))))

           ; read latency
           (3
             (if (== read_counter 0)
                (progn
                 (<=# rd_data_valid_r 1)
                 (<=# rd_data_r addr_r)
                 (<=# read_counter ,(l_- beat-n 1))
                 (<=# status 4))
                (<=# read_counter (- read_counter 1))))

           ; output read data
           (4
             (if (== read_counter 0)
                (progn
                 (<=# rd_data_valid_r 0)
                 (<=# read_counter ,(l_- read-post-wait-n 1))
                 (<=# status 1))
                (progn
                 (<=# read_counter (- read_counter 1))
                 (<=# rd_data_r (+ rd_data_r 1)))))

           ; write
           (#b10000
            (# 200 :pass)
           )

           (default
             (# 200 :pass)))))))

(when (eq *__name__* :__main__)
  (use clocks)
  (setf *transport-delay* 1)
  (make-clock clock)
  (make-sim-psram-module ese_psram)

  (let ((psram-if (make-psram-access-if)))
        ;(print `(:psram-access-input-if ,psram-if) *error-output*)
  (eval
    `(module tb ()
       (wire clk)
       (reg= rst 0)

       (reg ,@(make-wire-list-from-if psram-if
        :filter #'(lambda (x) (l_and (eq (car x) 'output)))
        :add-postfix '_r
       ))

       (clock :name clock0 clk)

       (wire ,@(make-wire-list-from-if psram-if))
       ,@(make-assign-list-from-if psram-if :add-src-postfix '_w)

       (ese_psram :name ese_psram0 clk rst
          ,@(make-wire-list-from-if psram-if
              :add-postfix '_w
              :only-name t))

       (initial
         (dumpfile "vcd/sim-psram.vcd")
         (dumpvars 0 tb)

         (= cmd_en_r 0)
         (= rst 0)
         (# 200)

         (= rst 1)

         (# 200)
         (= rst 0)

         (# 200 :pass)

         (= addr_r #x1234)
         (= cmd_en_r 1)
         (= cmd_r 0)
         (# 10)
         (= cmd_en_r 0)
         (wait (== rd_data_valid_w 1))
         (wait (== rd_data_valid_w 0))
         (= addr_r #x5678)
         (= cmd_en_r 1)
         (# 10)
         (= cmd_en_r 0)
         (# 2000)

         (finish))))))

(make-epilogue)
