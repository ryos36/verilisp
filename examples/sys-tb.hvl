(make-prologue)

(setf *transport-delay* 1)

(use clocks)
(use psdma)
(use sim-psram)
(use if-utils)

(make-psdma-module psdma)
(make-clock clock)
(make-sim-psram-module ese_psram)

(defvar psram-if (make-psram-access-if))

(eval
  `(module tb ()
     (wire clk)
     (reg= rst 0)
     
     (clock :name clock0 clk)

     ,@(make-reg-wire-assign 'make-psdma-module :ignore-sym-lst '(rst clk init_calib_i rd_data_i rd_data_valid_i wr_data_o data_mask_o addr_o cmd_o cmd_en_o))
     
     (wire ,@(make-wire-list-from-module 'make-psdma-module :ignore-sym-lst '(rst clk init_calib_i rd_data_i rd_data_valid_i wr_data_o data_mask_o addr_o cmd_o cmd_en_o) :filter #'(lambda (x) (eq (car x) 'output))))
     
     (wire init_calib_w (,*DATA_WIDTH* rd_data_w) rd_data_valid_w (,*DATA_WIDTH* wr_data_w) (,(l_/ *DATA_WIDTH* 8) data_mask_w) (,*ADDR_WIDTH* addr_w) cmd_w cmd_en_w)
     
     (psdma :name psdma0 clk rst ,@(make-wire-list-from-module 'make-psdma-module :only-name t))

     ;----------------------------------------------------------------
     (ese_psram :name ese_psram0 clk rst
          ,@(make-wire-list-from-if psram-if
              :add-postfix '_w
              :only-name t))
     ;----------------------------------------------------------------
     (reg= (5 write_count) (d 5 0))
     (reg= do_write_req 0)

     (always ((posedge clk))
       (if (> write_count (d 5 0))
         (progn
           (<=# write_tvalid_r 1)
           (if (== write_req_ack_w 1)
               (<=# write_req_r 0))
           (if (== write_tready_w 1)
              (progn
                (<=# write_tdata_r (+ write_tdata_r 1))
                (<=# write_count (- write_count 1)))))
         (progn
           (<=# write_tvalid_r 0)
           (if (== do_write_req 1)
             (progn
               (<=# write_req_r 1)
               (<=# write_tdata_r #x1234567890ABCDEF)
               (<=# write_count (d 5 31)))
             (<=# write_tdata_r (cat* 64 (cat (b 1 x))))))))
     
     (initial
         (dumpfile "vcd/sys-tb.vcd")
         (dumpvars 0 tb)
     
         (= read_addr_r (h ,*ADDR_WIDTH* 00_0000))
         (= read_bytes_r ,(l_* 640 4))
         (= read_req_valid_r 0)
         ;(= read_finished_ack_r 0)
         (= read_is_first_line_r 1)
         (= read_tready_r 1)

         (= write_req_r 0)
         (= write_finished_ack_r 0)
     
         (# 200 :pass)
         (= rst 0)
         (# 200) (= rst 1)
         (# 200) (= rst 0)
     
         (# 200)
         (= read_req_valid_r 1)
         (wait (== read_req_ready_w 1))
         (# 10)
         (= read_req_valid_r 0)
         (# 10)
         (wait (== read_req_ready_w 0))
     
         (= write_addr_r #x011100)
         (# 200)
         (= do_write_req 1)
         (# 10)
         (wait (== write_req_ack_w 1))
         (= do_write_req 0)
         (wait (== write_req_ack_w 0))
         (# 10)
         (wait (== write_finished_w 1))
         (# 100)
         (= write_finished_ack_r 1)
         (# 10)
         (wait (== write_finished_w 0))
         (# 10)
         (= write_finished_ack_r 0)
     
         #|
         (# 200)
         (= read_req_r 1)
         (wait (== read_req_ack_w 1))
         (# 10)
         (= read_req_r 0)
         (# 10)
         (wait (== read_req_ack_w 0))
         (# 10)
         (wait (== read_finished_w 1))
     
         (# 100)
         (= read_finished_ack_r 1)
     
         (# 10)
         (wait (== read_finished_w 0))

         (# 10)
         (= read_finished_ack_r 0)
         |#
     
         (# 200)

         (finish)
         )))

(make-epilogue)
