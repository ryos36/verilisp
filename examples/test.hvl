(# a)
(setq *transport-delay* 1)
(make-prologue)
(use gege)

(defun make-axi-sub (tdata_width &optional (axi-name ""))
      (copy-tree
        `((input ,(symcat axi-name "tvalid"))
          (output ,(symcat axi-name "tready"))
          (input (,(eval tdata_width) ,(symcat axi-name "tdata")))
          (input ,(symcat axi-name "tuser"))
          (input ,(symcat axi-name "tlast")))))

(defun make-axi-main (tdata_width &optional (axi-name ""))
      (copy-tree
        `((output ,(symcat axi-name "tvalid"))
          (input ,(symcat axi-name "tready"))
          (output (,(eval tdata_width) ,(symcat axi-name "tdata")))
          (output ,(symcat axi-name "tuser"))
          (output ,(symcat axi-name "tlast")))))

(defun make-axi (tdata_width &optional axi-name)
      (copy-tree
        `((output tvalid)
          (input tready)
          (output (,tdata_width tdata))
          (output tuser)
          (output tlast))))

(defmacro make_m (module-name tdata_width &optional (name ""))
 `(module ,module-name
     ((input clk)
      (input rst)
      ,@(make-axi-main tdata_width name))))

(defmacro make_s (module-name tdata_width &optional (name ""))
 `(module ,module-name
     ((input clk)
      (input rst)
      ,@(make-axi-sub tdata_width name))))

(setf *width* 16)
(make_m main *width*)
(make_s sub *width*)

(make_m main2 *width* bbb_)
(make_s sub2 *width* aaa_)

(defmacro make-def-axi-wire (m-name width)
 `(defun ,m-name (name)
     (copy-tree
      `((wire ,(symcat name "tready_w"))
          (wire ,(symcat name "tvalid_w"))
          (wire (,,width ,(symcat name "tdata_w")))
          (wire ,(symcat name "tuser_w"))
          (wire ,(symcat name "tlast_w"))))))

(make-def-axi-wire def-axi-wire8 *width*)

          
(defun def-axi-wire_old (width name)
  (copy-tree
    `((wire ,(symcat name "tready_w"))
      (wire ,(symcat name "tvalid_w"))
      (wire (8 ,(symcat name "tdata_w")))
      (wire ,(symcat name "tuser_w"))
      (wire ,(symcat name "tlast_w")))))


(defun connect-axi (name)
  (copy-tree
    `(,(symcat name "tready_w")
      ,(symcat name "tvalid_w")
      ,(symcat name "tdata_w")
      ,(symcat name "tuser_w")
      ,(symcat name "tlast_w"))))

(defmacro make_tb (name)
  `(module tb ((input clk) (input rst))
          ,@(def-axi-wire8 name)

          (main clk rst ,@(connect-axi name))
          (sub clk rst ,@(connect-axi name))))

(when (eq *__name__* :__main__)
    (use jgeil)
    (make_tb test_)
    (# 200)
    )
(use myuse)
