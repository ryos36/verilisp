(defparameter *clock-period* 10)
(setf *transport-delay* 1)
(make-prologue)

(defmacro inc (sym)
    `(<=# ,sym (+ ,sym 1)))

(defmacro dolist-num (array-name lst)
 `(let ((i 0) rv)
     (dolist (e ,lst)
      (push `(assign (ref ,,array-name ,i) ,e) rv)
      (incf i))
     (nreverse rv)))

(defmacro make-timing-generator-module (module-name h-list v-list)
    `(module ,module-name 
        ((input clk)
         (input rst)

         (output hsync)
         (output vsync))

      (reg= hsync_r 0)
      (assign hsync hsync_r)
      (reg= vsync_r 0)
      (assign vsync vsync_r)

      (reg= (5 status) 0)

      (reg (12 (4 h_list)))
      (reg= (12 hcount) 0)
      (reg (11 (4 v_list)))
      (reg= (11 vcount) 0)

      ,@(dolist-num 'h_list h-list)
      ,@(dolist-num 'v_list v-list)

      (reg= (2 cur_h_state) 0)
      (wire (12 cur_h_list))
      (assign cur_h_list (ref h_list cur_h_state))

      (reg= (2 cur_v_state) 0)
      (wire (12 cur_v_list))
      (assign cur_v_list (ref v_list cur_v_state))

      (always ((posedge clk))
        (case status
            (0
                (<=# hcount 0)
                (<=# vcount 0)
                (<=# status 1))

            (1
                (<=# status 2))

            (2
                (if (== hcount (- cur_h_list 1))
                  ((if (== cur_h_state 1)
                    ((if (== vcount (- cur_v_list 1))
                      ((if (== cur_v_state 1)
                        (<=# vsync_r 1)
                        (<=# vsync_r 0))
                       (display cur_v_state)
                       (inc cur_v_state)
                       (<=# vcount 0))

                      (inc vcount))
                    (<=# hsync_r 1))
                    (<=# hsync_r 0))
                   (inc cur_h_state)
                   ;(<=# status 3)
                   (<=# hcount 0))
                  (inc hcount)))

            (default 
                (display "hello"))))

      ))

(when (eq *__name__* :__main__)
    (use signal-log)
    (make-timing-generator-module tgen (640 16 96 48) (480 11 2 31))
    (make-signal-log data1)

    (module tb ()
     (reg clk)
     (reg rst)

     (always ()
        (# 5)
        (= clk (! clk)))

     (wire hsync vsync)
     (reg= (16 count) 0)
     (reg= finished 0)

     (data1 :name data1 clk vsync finished)
     (tgen :name tgen0 clk rst hsync vsync)
     (initial
        (= clk 0)
        (dumpfile "tgen.vcd")
        (dumpvars 0 tgen0)
        (# 200)
        (= rst 0)

        (# 200)
        (= rst 1)

        (# 200)
        (= rst 0)

        (# 200)
        ;(= tready 1'b1)
        (display (. tgen0 hcount))
        (v_while (== vsync 0)
            (# 10)
            (inc count)
            ;(display count (. tgen0 hcount))
            )
        (v_while (== vsync 1)
            (# 10)
            (= rst 0))

        (# 300)
        (= finished 1)
        (# 3000)
        (finish))
    ))

(make-epilogue)
