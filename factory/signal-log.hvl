(make-prologue)

(defparameter *signal-log-suffix* ".slog")
(defmacro inc (sym)
    `(<=# ,sym (+ ,sym 1)))

(defmacro make-signal-log (name width &optional file-name)
    ;(let ((file-name (if (null file-name) (concatenate 'string (symbol-name name) *signal-log-suffix*) file-name)))
        `(module ,name ((input clk) (input (,width ,name)) (input finished))

            (initial
              (display "[ (:" ,(symbol-name name) " ." ,width " )"))
            (reg (,width probe_signal_r))
            (reg (,width probe_signal_rr))
            (reg= (2 finished_r) 0)
            (reg= (32 count) 0)
            (always ((posedge clk))
                (<=# probe_signal_rr probe_signal_r)
                (<=# probe_signal_r ,name)
                (if (== probe_signal_r probe_signal_rr)
                    (inc count)
                    (if (== finished_r 0)
                      ((display "(%d . #x%x)" count probe_signal_rr)
                       (<=# count 0)))))
            (always ((posedge clk))
                (case finished_r
                    (0
                        (if (== finished 1)
                          (<=# finished_r 1)))
                    (1
                      (display "(%d . #h%x)" count probe_signal_rr)
                      (display "]")
                      (<=# finished_r 2))
                    (default
                        ; nothing to do
                        (<=# finished_r finished_r)
                        ))))
                ;)
                )

(make-signal-log data16 16)

(module tb ()
 (reg clk)
 (reg rst)

 (always ()
    (nli)
    (# 5)
    (= clk (! clk)))

 (wire hsync vsync)
 (reg= (16 probe) 0)
 (reg= finished 0)

 (data16 :name data16 clk probe finished)
 (initial
    (dumpfile "data16.vcd")
    (dumpvars 0 data16)

    (= clk 0)
    (# 200)
    (= rst 0)

    (# 200)
    (= rst 1)

    (# 200)
    (= rst 0)

    (# 200)
    (= probe 1)

    (# 4000)
    (= rst 0)

    (# 200)
    (= probe 0)

    (# 200)
    (= finished 1)

    (# 200)
    (= probe 1)

    (# 200)
    (finish)))

(make-epilogue)
