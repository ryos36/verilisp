(defmacro make-mem (name word-size addr-size 
        &key n-words input-file (input-format :b) (buf-delay 0) (latency 1) writable (write-timing :negedge) debug-on-write debug (orientation :word))
	(assert (and (<= 0 latency) (<= latency 2)))
	(assert (xor (= 0 latency) (= buf-delay 0)))
    (if (not n-words)
        ; by default, allow for as much space as possible
        (setq n-words (1<< addr-size))
    )
    `(v_module ,name (
            (output (,word-size rd_data))
            (input
                (,addr-size addr)
                ,@(if writable
                    `(
                        (,word-size wr_data)
                        wr_enable
                        clk
                    )
                )
            )
        )
        (v_reg
            (,word-size data_r)
            (,(if (equal orientation :byte) 8 word-size)
                (,n-words
                    data
                )
            )
        )
		,(if (= latency 2)
			`(v_reg
				(,word-size data_rr)))
			
		(v_wire (,word-size rd_data_w))
        ,@(foreach i (range word-size)
            `(v_buf
                ,buf-delay
                (v_ref rd_data ,i)
                (v_ref rd_data_w ,i)
            )
        )

		,(case latency
			(0 `(v_assign rd_data_w data_r)) ;async
			(1 `(v_assign rd_data_w data_r))
			(2 `(v_assign rd_data_w data_rr)))

        (v_always (,(if (eq latency 0) 'addr '(posedge clk)))
            ,(if (eq latency 2) `(v_<=# data_rr data_r))

            (,(if (= latency 0) 'v_=  'v_<=#) data_r
                ,(if (equal orientation :byte)
                    `(v_cat
                        ,@(foreach i (range (/ word-size 8))
                            `(v_ref data (v_+ addr ,i))
                        )
                    )
                    `(v_ref data addr)
                )
            )
        )
        ,(if writable
            `(v_always (
                    (,(if (and (= latency 0) (eq write-timing :negedge)) 'negedge 'posedge) clk)
                )
                ,(if debug
                    `(v_display
                        "time:%d; addr=%d; wr_data=%x; wren=%b"
                        (v_time)
                        addr
                        wr_data
                        wr_enable
                    )
                )
                (v_if wr_enable
                    (progn
                        ,(if debug-on-write
                            `(v_display
                                "time:%d; mem[%d] = %d;"
                                (v_time)
                                addr
                                wr_data
                            )
                        )
                        ,(if (equal orientation :byte)
                            `(progn
                                ,@(foreach i (range (/ word-size 8))
                                    `(v_=
                                        (v_ref data (v_+ addr ,i))
                                        (v_ref wr_data
                                            ,(- addr-size 1 (* i 8))
                                            ,(-
                                                addr-size
                                                (* (+ i 1) 8)
                                            )
                                        )
                                    )
                                )
                            )
                            `(v_<=#
                                (v_ref data addr)
                                wr_data
                            )
                        )
                    )
                )
            )
        )
        ,(if input-file
            `(v_initial
                (,(if (eq input-format :h)
                        'v_readmemh
                        'v_readmemb
                    )
                    ,input-file
                    data
                )
            )
        )
    )
)
