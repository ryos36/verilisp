(setq *comment-expand* nil)
(use multipliers)
;(adder sum c_out a b c_in)
;(slice (output (WORDSIZE sum_out) c_out) (input ((- WORDSIZE 1) sum_in) (WORDSIZE b) a0 a1 c_in))

(defmacro make-mul-tests (WORDSIZE)
    `(progn
        
        (make-multiplier mul ,WORDSIZE)
        
        (module test_slice ()
            (wire (,WORDSIZE sum_out) c_out)
            (reg (,(l_- WORDSIZE 1) sum_in) (,WORDSIZE b) a0 a1 c_in)
            (mul_slice
                sum_out
                c_out
                sum_in
                b
                a0
                a1
                c_in
            )
            (initial
                (= sum_in 1)
                (= b 1)
                (= a0 0)
                (= a1 1)
                (= c_in 0)
                (delay 10000 nil)
                (display "%b %b" sum_out c_out)
            )
        )
        
        (module test_mul ()
            (reg (,WORDSIZE a b))
            (wire (,(l_* WORDSIZE 2) out))
            (wire overflow)
            (wire signed_)
            (mul out overflow a b signed_)
            (dump "test.vcd")
            (initial
                (delay 10000 nil)
                (fromto a 0 ,(l_- (l_<< 1 WORDSIZE) 1)
                    (fromto b 0 ,(l_- (l_<< 1 WORDSIZE) 1)
                        (delay 10000 nil)
                        (if (== out (* a b))
                            (display "good: %d * %d = %d :: %b * %b = %b" a b out a b out)
                            (display "bad: %d * %d = %d != %d :: %b * %b = %b != %b" a b (* a b) out a b (* a b) out)
                        )
                    )
                    (delay 10000 nil)
                    (if (== out (* a b))
                        (display "good: %d * %d = %d :: %b * %b = %b" a b out a b out)
                        (display "bad: %d * %d = %d != %d :: %b * %b = %b != %b" a b (* a b) out a b (* a b) out)
                    )
                )
                (delay 10000 nil)
                (if (== out (* a b))
                    (display "good: %d * %d = %d :: %b * %b = %b" a b out a b out)
                    (display "bad: %d * %d = %d != %d :: %b * %b = %b != %b" a b (* a b) out a b (* a b) out)
                )
            )
        )
    )
)

(make-mul-tests 4)

================================================================================

module unit_mux(out, sel, a, b);
    output out;
    input sel;
    input a;
    input b;
    wire anon_0;
    wire anon_1;
    or anon_2 (out, anon_0, anon_1);
    and anon_3 (anon_0, b, sel);
    wire anon_4;
    and anon_5 (anon_1, a, anon_4);
    not anon_6 (anon_4, sel);
endmodule

module full_adder(sum, c_out, a, b, c_in);
    output sum;
    output c_out;
    input a;
    input b;
    input c_in;
    wire a_xor_b;
    xor anon_7 (a_xor_b, a, b);
    xor anon_8 (sum, a_xor_b, c_in);
    wire anon_9;
    wire anon_10;
    or anon_11 (c_out, anon_9, anon_10);
    and anon_12 (anon_9, a, b);
    and anon_13 (anon_10, c_in, a_xor_b);
endmodule

module mul_slice_slice(sum_out, carry_out, sum_in, a0, b, carry_in);
    output sum_out;
    output carry_out;
    input sum_in;
    input a0;
    input b;
    input carry_in;
    wire anon_14;
    full_adder anon_15 (sum_out, carry_out, sum_in, anon_14, carry_in);
    and anon_16 (anon_14, a0, b);
endmodule

module mul_slice(sum_out, c_out, sum_in, b, a0, a1, c_in);
    output [3 : 0] sum_out;
    output c_out;
    input [2 : 0] sum_in;
    input [3 : 0] b;
    input a0;
    input a1;
    input c_in;
    supply0 gnd;
    wire [2 : 0] carries;
    wire anon_18;
    wire anon_19;
    full_adder anon_20 (sum_out[0], carries[0], anon_18, anon_19, gnd);
    and anon_21 (anon_18, a1, b[0]);
    and anon_22 (anon_19, a0, b[1]);
    mul_slice_slice anon_23 (sum_out[1], carries[1], sum_in[0], a0, b[2], carries[0]);
    mul_slice_slice anon_24 (sum_out[2], carries[2], sum_in[1], a0, b[3], carries[1]);
    full_adder anon_25 (sum_out[3], c_out, sum_in[2], c_in, carries[2]);
endmodule

module mul(out, overflow, a, b, signed_);
    output [7 : 0] out;
    output overflow;
    input [3 : 0] a;
    input [3 : 0] b;
    input signed_;
    supply0 gnd;
    wire [1 : 0] carries;
    wire [2 : 0] slice_sum_0;
    wire [2 : 0] slice_sum_1;
    and anon_26 (out[0], a[0], b[0]);
    mul_slice anon_27 (out[4 : 1], carries[0], slice_sum_1, b, a[0], a[1], gnd);
    mul_slice anon_28 ({out[5], slice_sum_1}, carries[1], slice_sum_0, b, a[1], a[2], carries[0]);
    wire [2 : 0] last_sum_in;
    and anon_29 (last_sum_in[0], a[3], b[1]);
    and anon_30 (last_sum_in[1], a[3], b[2]);
    and anon_31 (last_sum_in[2], a[3], b[3]);
    mul_slice anon_32 ({out[6], slice_sum_0}, out[7], last_sum_in, b, a[2], a[3], carries[1]);
endmodule

module test_slice();
    wire [3 : 0] sum_out;
    wire c_out;
    reg [2 : 0] sum_in;
    reg [3 : 0] b;
    reg a0;
    reg a1;
    reg c_in;
    mul_slice anon_33 (sum_out, c_out, sum_in, b, a0, a1, c_in);
    initial
    begin
        sum_in = 1;
        b = 1;
        a0 = 0;
        a1 = 1;
        c_in = 0;
        #10000;
        $display("%b %b", sum_out, c_out);
    end
endmodule

module test_mul();
    reg [3 : 0] a;
    reg [3 : 0] b;
    wire [7 : 0] out;
    wire overflow;
    wire signed_;
    mul anon_34 (out, overflow, a, b, signed_);
    initial
    begin
        $dumpfile("test.vcd");
        $dumpvars;
    end
    initial
    begin
        #10000;
        for (a = 0; (a < 15); a = (a + 1))
        begin
            for (b = 0; (b < 15); b = (b + 1))
            begin
                #10000;
                if ((out == (a * b)))
                begin
                    $display("good: %d * %d = %d :: %b * %b = %b", a, b, out, a, b, out);
                end
                else
                begin
                    $display("bad: %d * %d = %d != %d :: %b * %b = %b != %b", a, b, (a * b), out, a, b, (a * b), out);
                end
            end
            #10000;
            if ((out == (a * b)))
            begin
                $display("good: %d * %d = %d :: %b * %b = %b", a, b, out, a, b, out);
            end
            else
            begin
                $display("bad: %d * %d = %d != %d :: %b * %b = %b != %b", a, b, (a * b), out, a, b, (a * b), out);
            end
        end
        #10000;
        if ((out == (a * b)))
        begin
            $display("good: %d * %d = %d :: %b * %b = %b", a, b, out, a, b, out);
        end
        else
        begin
            $display("bad: %d * %d = %d != %d :: %b * %b = %b != %b", a, b, (a * b), out, a, b, (a * b), out);
        end
    end
endmodule
